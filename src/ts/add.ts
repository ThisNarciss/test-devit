// Робимо функцію замикання
export const add = (extNum: number) => {
  // Створюємо функцію яка буде запам'ятовувати параметри у поточному лексичному оточені та повертатися із функції add таким чином ми можемо робити наступний виклик функції
  const closureFunc = (intNum: number) => {
    //   Повертаємо результат рекурсії яким буде ще одне замикання щоб можна було робити більше двох викликів функції
    return add(extNum + intNum);
  };
  // Враховуючи що із нашої функції завжди буде повертатися посилання на функцію (так як ми робимо рекурсію у функції замикання а не повертаємо з неї результат) нам необхідно використати метод valueOf і присвоїти йому функцію в якій ми повертаємо наш результат. Тепер коли ми використовуємо виклик нашої функції у контексті Number автоматом викликається функція яку ми записали у valueOf і таким чином ми отримуємо наш результат
  closureFunc.valueOf = () => {
    return extNum;
  };

  return closureFunc;
};

console.log(Number(add(1)(2))); // == 3
console.log(Number(add(1)(2)(5))); // == 8
console.log(Number(add(1)(2)(-3)(4))); // == 4
console.log(Number(add(1)(2)(3)(4)(-5))); // == 5
